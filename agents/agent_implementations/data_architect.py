import os

from google import genai
from google.genai import types

from agents.prompts.data_architect import requirements_system_prompt_template, requirements_user_prompt_template, \
    data_analysis_system_prompt_template, data_analysis_user_prompt_template
from agents.tools.bigquery_tool import fetch_bigquery_metadata


class DataArchitectAgent:
    """
    Agent responsible for generating requirements for a data processing pipeline
    based on various data sources and a user query.
    """
    DEFAULT_MODEL_ID = "gemini-2.5-pro-preview-05-06"

    def __init__(self, state: dict, client: genai.Client):
        """
        Initializes the DataArchitectAgent.

        Args:
            state (dict): A dictionary containing agent state, expected to have "user_query".
            client (genai.Client): The client instance for interacting with the generative AI model.
        """
        self.state = state
        self.client = client

    def _generate_llm_response(self, system_prompt: str, user_prompt: str, model_name: str = None) -> str:
        """
        Helper method to generate content using the configured genai client.

        Note: The call `self.client.models.generate_content` and the way `system_instruction`
        is passed via `types.GenerateContentConfig` are based on the original code snippet.
        This may differ from standard `google-generativeai` SDK usage. Adjust if necessary
        for your specific `genai.Client` and `types` version.
        """
        actual_model_name = model_name if model_name else self.DEFAULT_MODEL_ID

        processed_user_prompt = [user_prompt] if isinstance(user_prompt, str) else user_prompt

        gen_config = None
        if system_prompt:
            try:
                gen_config = types.GenerateContentConfig(system_instruction=system_prompt)
            except TypeError as e:
                print(f"Warning: Failed to set system_instruction via types.GenerateContentConfig: {e}. "
                      "The system prompt may not be applied as intended. "
                      "This might be due to an SDK version mismatch or a custom setup. "
                      "In standard 'google-generativeai' SDK, 'system_instruction' is a "
                      "direct parameter to 'generate_content', not part of 'GenerationConfig'.")

        response = self.client.models.generate_content(
            model=actual_model_name,
            contents=processed_user_prompt,
            config=gen_config
        )
        return response.text

    def _analyze_data_sources(self, data_source_metadata: str, user_query: str) -> str:
        """
        Analyzes data sources based on their metadata and the user's query.

        Args:
            data_source_metadata (str): String containing metadata of the relevant data sources.
            user_query (str): The user's query describing the analytics problem.

        Returns:
            str: The analysis text generated by the LLM.
        """
        system_prompt = data_analysis_system_prompt_template.safe_substitute()
        user_prompt = data_analysis_user_prompt_template.safe_substitute(
            data_source_metadata=data_source_metadata,  # Updated variable name
            user_query=user_query,
        )

        analysis_text = self._generate_llm_response(
            system_prompt=system_prompt,
            user_prompt=user_prompt
        )
        return analysis_text

    def _generate_requirements_document(self, data_source_metadata: str, user_query: str,
                                        data_source_analysis: str) -> str:
        """
        Generates a requirements document for a data processing pipeline.

        Args:
            data_source_metadata (str): String containing metadata of the relevant data sources.
            user_query (str): The user's query describing the analytics problem.
            data_source_analysis (str): The analysis of the data sources relevant to the query.

        Returns:
            str: The requirements document text generated by the LLM.
        """
        system_prompt = requirements_system_prompt_template.safe_substitute()
        user_prompt = requirements_user_prompt_template.safe_substitute(
            data_source_metadata=data_source_metadata,  # Updated variable name
            user_query=user_query,
            data_source_analysis=data_source_analysis
        )

        requirements_text = self._generate_llm_response(
            system_prompt=system_prompt,
            user_prompt=user_prompt
        )
        return requirements_text

    def generate(self) -> tuple[str, str]:
        """
        Orchestrates the generation of a data processing pipeline requirements document.

        The process involves:
        1. Fetching metadata for relevant data sources.
        2. Analyzing these data sources in the context of the user's query.
        3. Generating a requirements document based on the query, metadata, and analysis.

        Raises:
            ValueError: If "user_query" is not found in the agent's state.

        Returns:
            tuple[str, str]: A tuple containing:
                - data_source_analysis (str): The text of the data source analysis.
                - requirements (str): The text of the generated requirements document.
        """
        user_query = self.state.get("user_query")
        if not user_query:
            raise ValueError("'user_query' not found in agent state.")

        # 1. Fetch metadata for relevant data sources
        data_source_metadata = self.state.get("data_source_metadata")

        # 2. Analyze the data sources relevant to the user query
        data_source_analysis = self._analyze_data_sources(
            data_source_metadata=data_source_metadata,  # Pass the generic metadata
            user_query=user_query
        )

        # 3. Generate requirements for the data processing pipeline
        requirements = self._generate_requirements_document(
            data_source_metadata=data_source_metadata,  # Pass the generic metadata
            user_query=user_query,
            data_source_analysis=data_source_analysis
        )

        return data_source_analysis, requirements
